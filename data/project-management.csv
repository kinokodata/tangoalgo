表面の単語,表面のヒント,表面の説明,裏面の単語,裏面のヒント,裏面の説明
ウォーターフォールモデル,滝のような開発,上流から下流へ順次進める開発モデル,Waterfall Model,後戻りしない,要件定義→設計→実装→テスト→運用の順次実行
アジャイル開発,機敏な開発,短期間の反復により柔軟に開発を進める手法,Agile Development,スプリント・イテレーション,変化に対応しながら段階的に開発。顧客との協調重視
スクラム,アジャルの一種,アジャイル開発の代表的なフレームワーク,Scrum,スプリント単位,プロダクトオーナー・スクラムマスター・開発チームで構成
スパイラルモデル,らせん状開発,プロトタイプを繰り返し改良する開発モデル,Spiral Model,リスク重視,リスク分析を重視。大規模システム向け
プロトタイピング,試作品作成,試作品を作って要件を確認する手法,Prototyping,使い捨て型・進化型,早期に動作確認。要件の明確化に有効
RAD,高速開発,ツールを活用した高速アプリケーション開発,Rapid Application Development,CASEツール使用,短期間での開発を重視。プロトタイピングを活用
DevOps,開発と運用の融合,開発チームと運用チームが協力する文化・手法,Development & Operations,継続的デリバリー,開発から運用までを一体化。自動化を推進
CI/CD,継続的統合・配信,コードの統合とデプロイを自動化,Continuous Integration/Delivery,Jenkins・GitLab CI,頻繁な統合とリリースで品質向上
WBS,作業分解構成図,プロジェクトの作業を階層的に分解した図,Work Breakdown Structure,成果物ベース,作業を管理可能な単位まで分解。工数見積の基礎
ガントチャート,工程表,作業の開始・終了を横棒で表した図,Gantt Chart,時間軸表示,プロジェクトの進捗を視覚的に管理
PERT図,矢線図,作業の順序関係を矢印で表した図,Program Evaluation and Review Technique,ネットワーク図,作業の依存関係を明確化。所要時間を算出
クリティカルパス,最長経路,プロジェクト全体の最短完了時間を決める経路,Critical Path,余裕時間ゼロ,この経路の遅れが全体の遅れに直結
アローダイアグラム,矢線図法,作業を矢線で表すネットワーク図,Arrow Diagram・ADM,ダミー作業あり,PERTの一種。作業の前後関係を表現
マイルストーン,重要な節目,プロジェクトの重要な中間目標点,Milestone,チェックポイント,進捗確認の基準点。成果物の完成時点
EVM,進捗の定量管理,コストと進捗を統合的に管理する手法,Earned Value Management,PV・EV・AC,計画値・実績値・実コストで進捗を数値化
ファンクションポイント法,機能規模測定,ソフトウェアの機能量から規模を見積もる,Function Point・FP,入出力・ファイル数,機能の複雑さと数から工数を算出
COCOMO,工数見積モデル,ソースコード行数から工数を見積もる,Constructive Cost Model,基本・中間・詳細,経験的データに基づく見積もりモデル
リスク管理,不確実性への対処,プロジェクトのリスクを識別・分析・対応,Risk Management,回避・転嫁・軽減・受容,リスクマトリクスで優先順位付け
品質管理,品質の確保,成果物の品質を計画・保証・管理,Quality Management,QC・QA,品質計画・品質保証・品質管理の3要素
構成管理,変更管理,成果物のバージョンや変更を管理,Configuration Management,Git・SVN,ベースライン管理と変更管理を実施
要件定義,要求の明確化,システムに必要な機能・性能を定義,Requirements Definition,機能・非機能要件,ユーザーの要求を明確化。開発の出発点
基本設計,外部設計,システムの全体構成や外部仕様を設計,Basic Design・External Design,画面・帳票設計,ユーザーから見える部分の設計
詳細設計,内部設計,プログラムの内部構造を設計,Detailed Design・Internal Design,モジュール設計,プログラマー向けの詳細な設計
単体テスト,部品テスト,個々のモジュールを単独でテスト,Unit Test,ホワイトボックス,プログラムの最小単位をテスト
結合テスト,組合せテスト,複数のモジュールを結合してテスト,Integration Test,インターフェース確認,モジュール間の連携をテスト
システムテスト,総合テスト,システム全体の機能・性能をテスト,System Test,要件との適合確認,実際の運用環境に近い状態でテスト
受入テスト,検収テスト,ユーザーが要件を満たしているか確認,Acceptance Test・UAT,本番前の最終確認,ユーザー主体で実施する最終テスト
回帰テスト,退行テスト,修正による既存機能への影響を確認,Regression Test,デグレード防止,変更後も既存機能が正常動作することを確認
ホワイトボックステスト,構造テスト,プログラムの内部構造に基づくテスト,White Box Test,命令網羅・判定網羅,ソースコードを見ながらテスト
ブラックボックステスト,仕様テスト,外部仕様に基づくテスト,Black Box Test,同値分割・境界値分析,内部構造を意識せずテスト
境界値分析,境界値テスト,データの境界値でテストする手法,Boundary Value Analysis,上限・下限・境界,バグが発生しやすい境界値を重点テスト
同値分割,同値クラス,同じ結果になるデータをグループ化,Equivalence Partitioning,有効・無効同値,テストケースを効率化
カバレッジ,網羅率,テストがコードをどれだけ網羅したか,Coverage,C0・C1・C2,命令網羅・分岐網羅・条件網羅
V字モデル,V字型開発,開発工程とテスト工程を対応させたモデル,V-Model,左が開発・右がテスト,各開発フェーズに対応するテストを定義
スタブ,下位ダミー,下位モジュールの代替プログラム,Stub,仮の戻り値,上位モジュールのテスト用
ドライバ,上位ダミー,上位モジュールの代替プログラム,Driver,テスト実行制御,下位モジュールのテスト用
レビュー,成果物検証,成果物を第三者が検証する活動,Review,インスペクション・ウォークスルー,早期の欠陥発見で品質向上
インスペクション,公式レビュー,役割分担して行う公式なレビュー,Inspection,モデレータ主導,チェックリストに基づく厳密なレビュー
ウォークスルー,非公式レビュー,作成者主導で行うレビュー,Walkthrough,作成者が説明,カジュアルなレビュー。教育効果も期待
ペアプログラミング,2人で開発,2人1組でプログラミングする手法,Pair Programming,ドライバー・ナビゲーター,リアルタイムレビューで品質向上
リファクタリング,コード改善,外部動作を変えずに内部構造を改善,Refactoring,技術的負債解消,可読性・保守性の向上
テスト駆動開発,テスト先行,テストを先に書いてから実装する開発手法,TDD・Test-Driven Development,Red-Green-Refactor,失敗するテスト→成功する実装→リファクタリング
継続的インテグレーション,継続的統合,頻繁にコードを統合してビルド・テスト,Continuous Integration・CI,自動ビルド・テスト,早期の問題発見と品質向上
PMBOK,PM知識体系,プロジェクトマネジメントの知識体系,Project Management Body of Knowledge,10の知識エリア,PMIが策定した国際標準
ITIL,ITサービス管理,ITサービスマネジメントのベストプラクティス,IT Infrastructure Library,サービスライフサイクル,ITサービスの品質向上フレームワーク
SLA,サービス品質保証,サービスレベルに関する合意文書,Service Level Agreement,可用性・応答時間,提供者と利用者間の品質保証契約
KPI,重要業績指標,目標達成度を測る重要な指標,Key Performance Indicator,定量的評価,プロジェクトの成功を測る指標
PDCA,改善サイクル,計画・実行・評価・改善のサイクル,Plan-Do-Check-Act,継続的改善,品質向上の基本的なマネジメントサイクル
変更管理,変更の統制,仕様変更を適切に管理するプロセス,Change Management,CCB承認,変更要求の評価・承認・実装を管理